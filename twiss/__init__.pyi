from torch import Tensor
from torch.distributions.multivariate_normal import MultivariateNormal

def symplectic_conjugate(m:Tensor)                                         -> Tensor: ...
def symplectify(m:Tensor)                                                  -> Tensor: ...
def is_symplectic(m:Tensor, *, epsilon:float=1.0E-12)                      -> bool: ...
def rotation(*angles:Tensor)                                               -> Tensor: ...
def twiss(m:Tensor, *, epsilon:float=1.0E-12)                              -> tuple[Tensor, Tensor, Tensor]: ...
def is_stable(m:Tensor, *, epsilon:float=1.0E-12)                          -> bool: ...
def propagate(w:Tensor, m:Tensor)                                          -> Tensor: ...
def advance(n:Tensor, m:Tensor)                                            -> tuple[Tensor, Tensor]: ...
def normal_to_wolski(n:Tensor)                                             -> Tensor: ...
def wolski_to_normal(w:Tensor, *, epsilon:float=1.0E-12)                   -> Tensor: ...
def parametric(pars:Tensor)                                                -> Tensor: ...
def lb_normal(pars:Tensor)                                                 -> Tensor: ...
def cs_normal(pars:Tensor)                                                 -> Tensor: ...
def wolski_to_lb(pars:Tensor)                                              -> Tensor: ...
def lb_to_wolski(pars:Tensor)                                              -> Tensor: ...
def wolski_to_cs(pars:Tensor)                                              -> Tensor: ... 
def cs_to_wolski(pars:Tensor)                                              -> Tensor: ...
def invariant(normal:Tensor, orbit:Tensor)                                 -> Tensor: ...
def lb_invariant(twiss:Tensor, orbit:Tensor)                               -> Tensor: ...
def cs_invariant(twiss:Tensor, orbit:Tensor)                               -> Tensor: ...
def transport(n1:Tensor, n2:Tensor, *mu12:Tensor)                          -> Tensor: ...
def wolski_transport(pars1:Tensor, pars2:Tensor, *mu12:Tensor)             -> Tensor: ...
def lb_transport(pars1:Tensor, pars2:Tensor, *mu12:Tensor)                 -> Tensor: ...
def cs_transport(pars1:Tensor, pars2:Tensor, *mu12:Tensor)                 -> Tensor: ...
def momenta(matrix:Tensor, qx1:Tensor, qx2:Tensor, qy1:Tensor, qy2:Tensor) -> tuple[Tensor, Tensor, Tensor, Tensor]: ...
def normal(mean:Tensor, emittance:Tensor, wolski:Tensor)                   -> MultivariateNormal: ...
